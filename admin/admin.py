from data.loader import bot, dp, FSMContext, State, Message, config
from data.configs import delete_message, resolve_username_to_user_id
from aiogram.types import InputFile, CallbackQuery, ContentTypes, InputMediaPhoto
from database.database import collection, ObjectId
from states_scenes.scene import MySceneStates
from keyboards.inline_keyboards import generate_eidit_positions, generate_admin_return_main, generate_delete_positions, generate_admin_price_edit_choice, generate_admin_limit_edit_choice, generate_admin_main_page, generate_add_button, generate_admin_return
import asyncio
import re
import psutil

@dp.message_handler(commands=['admin'])
async def react_to_admin(ctx: Message):
    try:
        await ctx.delete()
        db = collection.find_one({'_id': ObjectId('64987b1eeed9918b13b0e8b4')})
        if ctx.from_user.id not in db['admins'] and ctx.from_user.id != int(config['MAIN_ADMIN_ID']): return await ctx.answer('üîí')
        await ctx.answer_photo(InputFile('admin/admin_page.jpg'), f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É, <a href="tg://user?id={ctx.from_user.id}">{ctx.from_user.first_name}</a>', reply_markup=generate_admin_main_page())
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'admin_exit')
async def answer_to_admin_exit(call: CallbackQuery):
    try:
        await call.answer('üòú –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!')
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç-–∞–¥–º–∏–Ω –∏ –º–æ–≥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç.\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —Å–≤–æ–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç:', reply_markup=generate_add_button())
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'admin_add')
async def answer_to_admin_add(call: CallbackQuery):
    try:
        await call.answer()
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.message.chat.id, 'üëÆ –í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ –ø—Ä—è–º—É—é —Å—Å–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
        await MySceneStates.add_admin.set()
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'admin_post')
async def answer_to_admin_post(call: CallbackQuery):
    try:
        await call.answer()
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.message.chat.id, 'üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞:')
        await MySceneStates.post_to_users.set()
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'admin_bot_stats')
async def answer_to_admin_stats(call: CallbackQuery):
    try:
        db = collection.find_one({'_id': ObjectId('64987b1eeed9918b13b0e8b4')})
        cpu_percent = psutil.cpu_percent(percpu=True)
        net_stats = psutil.net_io_counters()
        memory_stats = psutil.virtual_memory()
        await call.answer()
        await bot.edit_message_media(InputMediaPhoto(InputFile('admin/admin_stats.jpg'), caption=f'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n<b>–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(db["users"])}\n<b>–ö–æ–ª-–≤–æ —á–∞—Ç–æ–≤ —Å –±–æ—Ç–æ–º:</b> {len(db["groups"])}\n<b>–ö–æ–ª-–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b> {db["lics_buyed"]}\n<b>–ö–æ–ª-–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b> {db["earned"]}‚ÇΩ\n<b>–ö–æ–ª-–≤–æ —á–∞—Ç–æ–≤ —Å –ª–∏—Ü–µ–Ω–∑–∏–µ–π:</b> {len(db["chat_with_lics"])}\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VPS:</b>\n\n<b>–û–ø–µ—Ä–∞—Ç–∏–≤–∫–∞:</b>\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏: {memory_stats.used} –±–∞–π—Ç\n–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏: {memory_stats.percent}%\n\n<b>–°–µ—Ç—å:</b>\n–í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {net_stats.bytes_recv} –±–∞–π—Ç\n–ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {net_stats.bytes_sent} –±–∞–π—Ç\n\n<b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b>\n–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —è–¥—Ä–∞ 1: {cpu_percent[0]}%\n–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —è–¥—Ä–∞ 2: {cpu_percent[1]}%'), call.message.chat.id, call.message.message_id, reply_markup=generate_admin_return())
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == 'admin_stats_back')
async def answer_to_admin_back(call: CallbackQuery):
    try:
        await call.answer()
        await bot.edit_message_media(InputMediaPhoto(InputFile('admin/admin_page.jpg'), caption=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É, <a href="tg://user?id={call.from_user.id}">{call.from_user.first_name}</a>') , call.message.chat.id, call.message.message_id, reply_markup=generate_admin_main_page())
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == 'admin_edit_money')
async def answer_to_admin_emoney(call: CallbackQuery):
    try:
        db = collection.find_one({"_id": ObjectId('64987b1eeed9918b13b0e8b4')})
        prices = ''
        unsortedp = db['price']
        positions = sorted(unsortedp, key=lambda x: int(x['period']))
        for i in positions:
            prices += f'üîπ {i["period"]} –¥–Ω–µ–π ‚Äì {i["price"]}‚ÇΩ\n'
        await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       caption=f'üíé <b>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:</b>\n{prices}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                       reply_markup=generate_admin_price_edit_choice())
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'admin_edit_limits')
async def answer_to_admin_elimits(call: CallbackQuery):
    try:
        db = collection.find_one({"_id": ObjectId('64987b1eeed9918b13b0e8b4')})
        await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=f'‚úã <b>–õ–∏–º–∏—Ç—ã:</b>\n<b>–õ–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —á–∞—Ç:</b> {db["limit_to_users"]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', reply_markup=generate_admin_limit_edit_choice())
    except Exception as e:
        print(e)

# [{'period': '180', 'price': 180.0}, {'period': '365', 'price': 350.0}, {'period': '90', 'price': 90.0}, {'period': '30', 'price': 30.0}]
# collection.find_one_and_update({"_id": ObjectId('64987b1eeed9918b13b0e8b4')}, {"$set": {"price": [{'period': '180', 'price': 180.0}, {'period': '365', 'price': 350.0}, {'period': '90', 'price': 90.0}, {'period': '30', 'price': 30.0}]}})

@dp.callback_query_handler(lambda call: call.data == 'admin_deleteposition')
async def answer_to_admin_deleteposition(call: CallbackQuery):
    try:
        db = collection.find_one({"_id": ObjectId('64987b1eeed9918b13b0e8b4')})
        if len(db['price']) == 0: return await bot.send_message(call.message.chat.id, call.message.message_id, text='‚ö† –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –Ω–∞—à–µ–ª –Ω–∏ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
        await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=f'‚¨á <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:</b>', reply_markup=generate_delete_positions())
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'admin_addposition')
async def answer_to_admin_admin_addposition(call: CallbackQuery):
    try:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await MySceneStates.addposition_period_scene.set()
        await bot.send_message(chat_id=call.message.chat.id, text='‚úç –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –¥–Ω—è—Ö:')
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'admin_editposition')
async def answer_to_admin_admin_editposition(call: CallbackQuery):
    try:
        return await call.answer('üò∂ –ü–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ', show_alert=True)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption='‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', reply_markup=generate_eidit_positions())
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: 'positdelete' in call.data)
async def react_to_admin_positdelete(call: CallbackQuery):
    try:
        db = collection.find_one({"_id": ObjectId('64987b1eeed9918b13b0e8b4')})
        index_of_possition = None
        for index, item in enumerate(db['price']):
            if item.get("period") == call.data.split("_")[1]:
                index_of_possition = index
                break

        if len(db['price']) == 1: return await call.answer('‚úã –í –±–∞–∑–µ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è')

        collection.find_one_and_update({"_id": ObjectId('64987b1eeed9918b13b0e8b4')}, {"$pull": {f'price': {"period": call.data.split("_")[1]}}})

        await call.answer('–£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏!')
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=generate_delete_positions())
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'back_to_edit_price')
async def answer_to_admin_back_to_edit_price(call: CallbackQuery):
    db = collection.find_one({"_id": ObjectId('64987b1eeed9918b13b0e8b4')})
    prices = ''
    unsortedp = db['price']
    positions = sorted(unsortedp, key=lambda x: int(x['period']))
    for i in positions:
        prices += f'üîπ {i["period"]} –¥–Ω–µ–π ‚Äì {i["price"]}‚ÇΩ\n'
    await call.answer()
    await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                   caption=f'üíé <b>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:</b>\n{prices}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                   reply_markup=generate_admin_price_edit_choice())

@dp.callback_query_handler(lambda call: call.data == 'back_from_added_position')
async def answer_to_admin_back_from_added_position(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    db = collection.find_one({'_id': ObjectId('64987b1eeed9918b13b0e8b4')})
    if call.from_user.id not in db['admins'] and call.from_user.id != int(
        config['MAIN_ADMIN_ID']): return await call.answer('üîí')
    await bot.send_photo(chat_id=call.message.chat.id, photo=InputFile('admin/admin_page.jpg'),
                           caption=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É, <a href="tg://user?id={call.from_user.id}">{call.from_user.first_name}</a>',
                           reply_markup=generate_admin_main_page())

@dp.message_handler(content_types=['text'], state=MySceneStates.add_admin)
async def add_admin_scene(ctx: Message, state: FSMContext):
    try:
        user = ctx.text
        dicts_with_user_key = []

        pattern = r"https://t.me/([\w_]+)"

        if user[0] == '@':
            userid = await resolve_username_to_user_id(user.replace('@', ''))
            dicts_with_user_key.append(userid[0])
        elif re.search(pattern, user):
            usern = re.findall(pattern, user)[0]
            userid = await resolve_username_to_user_id(usern)
            dicts_with_user_key.append(userid[0])

        if len(dicts_with_user_key) == 0:
            trash = await ctx.answer('ü™™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            await state.finish()
            await react_to_admin(ctx)
            return asyncio.create_task(delete_message(5, [trash.message_id, ctx.message_id], ctx.chat.id))

        db = collection.find_one({'_id': ObjectId('64987b1eeed9918b13b0e8b4')})
        for i in dicts_with_user_key:
            if i in db['admins']: continue
            collection.find_one_and_update({'_id': ObjectId('64987b1eeed9918b13b0e8b4')}, {'$push': {'admins': i}})

        await ctx.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ!')
        await state.finish()
        await react_to_admin(ctx)
    except Exception as e:
        print(e)

@dp.message_handler(content_types=['text'], state=MySceneStates.addposition_period_scene)
async def addposition_period_scene(ctx: Message, state: FSMContext):
    try:
        text = ctx.text.replace('d', '').replace('–¥', '').replace('–¥–Ω–µ–π', '')
        if text.isdigit() == False:
            await state.finish()
            await MySceneStates.addposition_period_scene.set()
            return await ctx.answer('‚úã –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –¥–Ω—è—Ö:')

        db = collection.find_one({'_id': ObjectId('64987b1eeed9918b13b0e8b4')})
        check = None
        for index, item in enumerate(db['price']):
            if item.get("period") == text:
                check = index
                break

        if check != None:
            await ctx.answer('‚úã –í –±–∞–∑–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å —Ç–∞–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–æ–∫–∞:')
            await state.finish()
            return await MySceneStates.addposition_period_scene.set()
        collection.find_one_and_update({'_id': ObjectId('64987b1eeed9918b13b0e8b4')}, {"$push": {"price": {"period": text}}})
        await MySceneStates.addposition_price_scene.set()
        await ctx.answer('‚úç –ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø–ª–∞—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ(–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º-float —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–∏–º–µ—Ä: 100.0 | 250.0):')
    except Exception as e:
        print(e)

def has_decimal_point(string):
    parts = string.split('.')
    return len(parts) == 2 and all(part.isdigit() for part in parts)

def remove_non_digits_and_dot(text):
    pattern = r'[^0-9.]'
    return re.sub(pattern, '', text)

@dp.message_handler(content_types=['text'], state=MySceneStates.addposition_price_scene)
async def addposition_price_scene(ctx: Message, state: FSMContext):
    try:
        trahstext = ctx.text.replace('‚ÇΩ', '').replace('—Ä', '').replace('—Ä—É–±–ª–µ–π', '')
        text = remove_non_digits_and_dot(trahstext)
        check = has_decimal_point(text)
        if check == False:
            await ctx.answer(
                '‚úã –í—ã –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø–ª–∞—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ(–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º-float —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–∏–º–µ—Ä: 100.0 | 250.0):')
            await state.finish()
            return await MySceneStates.addposition_price_scene.set()

        text_to_float = float(text)
        db = collection.find_one({'_id': ObjectId('64987b1eeed9918b13b0e8b4')})
        index_of_last_position = len(db["price"]) - 1

        collection.find_one_and_update({'_id': ObjectId('64987b1eeed9918b13b0e8b4')}, {"$set": {f"price.{index_of_last_position}.price": text_to_float}})
        await state.finish()
        await ctx.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é:\n\nüÜï {db["price"][index_of_last_position]["period"]} –¥–Ω–µ–π - {text_to_float}‚ÇΩ', reply_markup=generate_admin_return_main())
    except Exception as e:
        print(e)

@dp.message_handler(content_types=ContentTypes.ANY, state=MySceneStates.post_to_users)
async def post_scene(ctx: Message, state: FSMContext):
    try:
        db = collection.find_one({'_id': ObjectId('64987b1eeed9918b13b0e8b4')})
        msgidtoedit = await ctx.answer('üîÑÔ∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
        asyncio.create_task(message_to_users(ctx, db['users'], msgidtoedit.message_id))
        await state.finish()
        await react_to_admin(ctx)
    except Exception as e:
        print(e)

async def message_to_users(ctx: Message, users: list, id):
    try:
        for i in users:
            try:
                await bot.copy_message(i, from_chat_id=ctx.chat.id, message_id=ctx.message_id)
            except:
                print('')
            await asyncio.sleep(0.3)
        await bot.edit_message_text('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ', ctx.chat.id, id)
    except Exception as e:
        print(e)

@dp.message_handler(commands=['user_to_id'])
async def convert_to_id(ctx: Message):
    try:
        args = ctx.text.split(' ')
        if len(args) == 1: return await ctx.answer(
            '–ü—Ä–∏–º–µ—Ä: <i>/user_to_id @username</i>')
        if len(args) > 2: return await ctx.answer(
            f'–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ 1 –∞—Ä–≥—É–º–µ–Ω—Ç, –∞ –≤ –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ –∏—Ö <b>{len(args) - 1}</b>. –ü—Ä–∏–º–µ—Ä: <i>/user_to_id @username</i>')
        if args[1][0] != '@': return await ctx.answer(
            '–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —é–∑–µ—Ä–Ω–µ–π–º. –ü—Ä–∏–º–µ—Ä: <i>/user_to_id @username</i>')

        try:
            global userid
            userid = await resolve_username_to_user_id(args[1].replace('@', ''))
            await ctx.answer(
                f'<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href="tg://user?id={userid[0]}">{userid[1]}</a>\n\n<b>ID:</b> <code>{userid[0]}</code>')
        except:
            print('')

        if userid == None: return await ctx.answer('üîé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    except Exception as e:
        print(e)


