# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç—ã—Ö, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:
import asyncio

from data.loader import bot, dp, FSMContext, State
from database.database import collection, ObjectId
from states_scenes.scene import MySceneStates
from aiogram.types import CallbackQuery
from keyboards.inline_keyboards import generate_my_chats, generate_add_b_resources, generate_back_to_main, generate_system_notice_show, generate_add_button, generate_settings_button, generate_edit_text_settings, generate_settings, generate_text_editing_page, generate_rules_editing_page, generate_warning_editing_page, generate_afk_editing_page, generate_admins_settings, generate_block_repostes_show, generate_block_ping_show, generate_block_resources_show, generate_money_top_up
import re


@dp.callback_query_handler(lambda call: call.data == 'check_admingr')
async def check_admin_rght(call: CallbackQuery):
    try:
        if call.message.chat.type == 'group' or call.message.chat.type == 'supergroup':
            admins = await bot.get_chat_administrators(call.message.chat.id)
            for me in admins:
                if me.user.username == "shieldsword_bot":
                    if me.can_manage_chat == True and me.can_delete_messages == True and me.can_restrict_members == True and me.can_invite_users == True and me.can_promote_members == True:
                        await bot.delete_message(call.message.chat.id, call.message.message_id)
                        admins = await bot.get_chat_administrators(call.message.chat.id)
                        creator_id = next((obj for obj in admins if obj["status"] == "creator"), None).user.id
                        await call.answer('–£—Å–ø–µ—Ö!', show_alert=False)
                        return await bot.send_message(call.message.chat.id,
                                                      'ü§ñ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç-–∞–¥–º–∏–Ω –∏ –º–æ–≥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π —á–∞—Ç.\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –º–µ–Ω—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:',
                                                      reply_markup=generate_settings_button(
                                                          f'{call.message.chat.id}_{creator_id}'))
                    else:
                        return await call.answer(
                            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å üò∂ –Ø –≤—Å–µ –µ—â—ë –±–µ–∑ –ø—Ä–∞–≤.\n\n–í—ã–¥–∞–π—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!',
                            show_alert=True)
                    break
                else:
                    return await call.answer(
                        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å üò∂ –Ø –≤—Å–µ –µ—â—ë –±–µ–∑ –ø—Ä–∞–≤.\n\n–í—ã–¥–∞–π—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!',
                        show_alert=True)
                    break
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == 'settings_texts')
async def change_to_edit_page(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = int("-" + re.sub(r"\D", "", group_id_url))
        await call.answer()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:',
                                    reply_markup=generate_edit_text_settings())
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'back_to_chose')
async def react_to_back(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = int("-" + re.sub(r"\D", "", group_id_url))
        await call.answer()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)',
                                    reply_markup=generate_settings())
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'done_btn')
async def react_to_done(call: CallbackQuery):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        await asyncio.sleep(2)
        await bot.send_message(chat_id=call.message.chat.id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç-–∞–¥–º–∏–Ω –∏ –º–æ–≥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç.\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —Å–≤–æ–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç:',
            reply_markup=generate_add_button())
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'texts_greeting')
async def text_greeting_show(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = "-" + re.sub(r"\D", "", group_id_url)
        db = collection.find_one({"chats": str(group_id)})

        index_of_chat = 0
        for index, item in enumerate(db['settings']):
            if item.get("chat_id") == group_id:
                index_of_chat = index
                break

        text = db["settings"][index_of_chat]['greeting']

        await call.answer()
        if text == 'None':
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, <b>{str("{member_name}")}</b>!\n\n–ü—Ä–µ–∂–¥–µ —á–µ–º —Ä–∞–∑–º–µ—â–∞—Ç—å —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏. –û–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ /rules',
                                        reply_markup=generate_text_editing_page())
        else:
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n{text}',
                                        reply_markup=generate_text_editing_page())
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'show_rules')
async def text_rules_show(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = "-" + re.sub(r"\D", "", group_id_url)
        db = collection.find_one({"chats": str(group_id)})

        index_of_chat = 0
        for index, item in enumerate(db['settings']):
            if item.get("chat_id") == group_id:
                index_of_chat = index
                break

        text = db["settings"][index_of_chat]['rules']

        await call.answer()
        if text == 'None':
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n<b>–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:</b>\n\n<i>–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</i>',
                                        reply_markup=generate_rules_editing_page())
        else:
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n<b>–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:</b>\n\n{text}',
                                        reply_markup=generate_rules_editing_page())
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'show_warning')
async def text_warning_show(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = "-" + re.sub(r"\D", "", group_id_url)
        db = collection.find_one({"chats": str(group_id)})

        index_of_chat = 0
        for index, item in enumerate(db['settings']):
            if item.get("chat_id") == group_id:
                index_of_chat = index
                break

        text = db["settings"][index_of_chat]['warning']

        await call.answer()
        if text == 'None':
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏:</b>\n\n–í—ã –Ω–∞—Ä—É—à–∞–µ—Ç–µ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞! –ó–∞–ø—Ä–µ—â–µ–Ω—ã –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏!',
                                        reply_markup=generate_warning_editing_page())
        else:
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏:</b>\n\n{text}',
                                        reply_markup=generate_warning_editing_page())
    except Exception as e:
        print(e)



@dp.callback_query_handler(lambda call: call.data == 'formating')
async def format_btn_react(call: CallbackQuery):
    try:
        await call.answer('üíø –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç—Ä–æ–∏—Ç—å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≤–∞—à —Ç–µ–∫—Å—Ç\n\n–§–∏—á–∏:\n{member_name} - –∏–º—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞', show_alert=True)
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'show_afk')
async def text_afk_show(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = "-" + re.sub(r"\D", "", group_id_url)
        db = collection.find_one({"chats": str(group_id)})

        index_of_chat = 0
        for index, item in enumerate(db['settings']):
            if item.get("chat_id") == group_id:
                index_of_chat = index
                break

        text = db["settings"][index_of_chat]['afk']

        await call.answer()
        if text == 'None':
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞:</b>\n\n–ê—É—É—É... –ß—Ç–æ-—Ç–æ –∞–∫—Ç–∏–≤–∞ –Ω–µ—Ç',
                                        reply_markup=generate_afk_editing_page())
        else:
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞:</b>\n\n{text}',
                                        reply_markup=generate_afk_editing_page())
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'back_to_show_page')
async def react_to_back_to_show(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = int("-" + re.sub(r"\D", "", group_id_url))
        await call.answer()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:',
                                    reply_markup=generate_edit_text_settings())
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: 'edit' in call.data)
async def scenes_editor(call: CallbackQuery):
    try:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        call_main = call.data.split('_')[1]
        group_id_url = call.message.entities[0].url
        group_id = int("-" + re.sub(r"\D", "", group_id_url))
        collection.find_one_and_update({"user_id": call.from_user.id}, {"$set": {"chat_editing": group_id}})
        if call_main == 'greeting':
            await call.answer()
            await MySceneStates.greeting_change_text_scene.set()
            await bot.send_message(call.message.chat.id, 'üìã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞:')
        elif call_main == 'rules':
            await call.answer()
            await MySceneStates.rules_change_text_scene.set()
            await bot.send_message(call.message.chat.id, 'üìã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞:')
        elif call_main == 'warning':
            await call.answer()
            await MySceneStates.warning_change_text_scene.set()
            await bot.send_message(call.message.chat.id, 'üìã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π:')
        elif call_main == 'afk':
            await call.answer()
            await MySceneStates.afk_change_text_scene.set()
            await bot.send_message(call.message.chat.id, 'üìã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å —á–∞—Ç –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:')
        else:
            await call.answer()
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == 'settings_admins')
async def edit_admins_settings(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = int("-" + re.sub(r"\D", "", group_id_url))
        await call.answer()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:', reply_markup=generate_admins_settings())
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == 'back_to_admin_page')
async def back_to_admin_page(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = int("-" + re.sub(r"\D", "", group_id_url))
        await call.answer()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:', reply_markup=generate_admins_settings())
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == 'block_resources_show')
async def react_to_block_resources_show(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = "-" + re.sub(r"\D", "", group_id_url)
        db = collection.find_one({"user_id": call.from_user.id})

        index_of_chat = 0
        for index, item in enumerate(db['settings']):
            if item.get("chat_id") == group_id:
                index_of_chat = index
                break
        await call.answer()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n\n–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã:', reply_markup=generate_block_resources_show(call.from_user.id, index_of_chat))
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'block_repostes_show')
async def react_to_block_repostes_show(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = "-" + re.sub(r"\D", "", group_id_url)
        db = collection.find_one({"user_id": call.from_user.id})

        index_of_chat = 0
        for index, item in enumerate(db['settings']):
            if item.get("chat_id") == group_id:
                index_of_chat = index
                break
        await call.answer()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n\n–ó–∞–ø—Ä–µ—Ç —Ä–µ–ø–æ—Å—Ç–æ–≤:', reply_markup=generate_block_repostes_show(call.from_user.id, index_of_chat))
    except Exception as e:
        print(e)\


@dp.callback_query_handler(lambda call: call.data == 'system_notice_show')
async def react_to_system_notice_show(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = "-" + re.sub(r"\D", "", group_id_url)
        db = collection.find_one({"user_id": call.from_user.id})

        index_of_chat = 0
        for index, item in enumerate(db['settings']):
            if item.get("chat_id") == group_id:
                index_of_chat = index
                break
        await call.answer()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n\n–ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —á–∞—Ç—É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=generate_system_notice_show(call.from_user.id, index_of_chat))
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'block_ping_show')
async def react_to_block_ping_show(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = "-" + re.sub(r"\D", "", group_id_url)
        db = collection.find_one({"user_id": call.from_user.id})

        index_of_chat = 0
        for index, item in enumerate(db['settings']):
            if item.get("chat_id") == group_id:
                index_of_chat = index
                break
        await call.answer()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n\n–ó–∞–ø—Ä–µ—Ç –ø–∏–Ω–≥–∞:', reply_markup=generate_block_ping_show(call.from_user.id, index_of_chat))
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: 'activator' in call.data)
async def react_to_activator(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = "-" + re.sub(r"\D", "", group_id_url)
        db = collection.find_one({"user_id": call.from_user.id})

        index_of_chat = 0
        for index, item in enumerate(db['settings']):
            if item.get("chat_id") == group_id:
                index_of_chat = index
                break

        call_data_identificator = call.data.split('_')[1]

        if call_data_identificator == 'resources':
            if db['settings'][index_of_chat]['block_resources']['active'] == False:
                collection.find_one_and_update({"user_id": call.from_user.id},
                                               {"$set": {f"settings.{index_of_chat}.block_resources.active": True}})
            else:
                collection.find_one_and_update({"user_id": call.from_user.id},
                                               {"$set": {f"settings.{index_of_chat}.block_resources.active": False}})
            await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                reply_markup=generate_block_resources_show(call.from_user.id, index_of_chat))
        elif call_data_identificator == 'repostes':
            if db['settings'][index_of_chat]['block_repostes']['active'] == False:
                collection.find_one_and_update({"user_id": call.from_user.id},
                                               {"$set": {f"settings.{index_of_chat}.block_repostes.active": True}})
            else:
                collection.find_one_and_update({"user_id": call.from_user.id},
                                               {"$set": {f"settings.{index_of_chat}.block_repostes.active": False}})
            await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                reply_markup=generate_block_repostes_show(call.from_user.id, index_of_chat))
        elif call_data_identificator == "sysnot":
            if db['settings'][index_of_chat]['system_notice']['active'] == False:
                collection.find_one_and_update({"user_id": call.from_user.id},
                                               {"$set": {f"settings.{index_of_chat}.system_notice.active": True}})
            else:
                collection.find_one_and_update({"user_id": call.from_user.id},
                                               {"$set": {f"settings.{index_of_chat}.system_notice.active": False}})
            await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                reply_markup=generate_system_notice_show(call.from_user.id, index_of_chat))
        else:
            if db['settings'][index_of_chat]['block_ping']['active'] == False:
                collection.find_one_and_update({"user_id": call.from_user.id},
                                               {"$set": {f"settings.{index_of_chat}.block_ping.active": True}})
            else:
                collection.find_one_and_update({"user_id": call.from_user.id},
                                               {"$set": {f"settings.{index_of_chat}.block_ping.active": False}})
            await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                reply_markup=generate_block_ping_show(call.from_user.id, index_of_chat))

        await call.answer()
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'blocked_resources')
async def show_blocked_resources(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = "-" + re.sub(r"\D", "", group_id_url)
        db = collection.find_one({"user_id": call.from_user.id})

        index_of_chat = 0
        for index, item in enumerate(db['settings']):
            if item.get("chat_id") == group_id:
                index_of_chat = index
                break

        await call.answer()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n\n–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω:\n\n<b>{", ".join(db["settings"][index_of_chat]["block_resources"]["r_list"])}</b>',
                                    reply_markup=generate_add_b_resources())
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'add_block_resources')
async def react_to_add_block_resources(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    group_id_url = call.message.entities[0].url
    group_id = int("-" + re.sub(r"\D", "", group_id_url))
    collection.find_one_and_update({"user_id": call.from_user.id}, {"$set": {"chat_editing": group_id}})
    await bot.send_message(call.message.chat.id, 'üìã –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä 1: ru\n–ü—Ä–∏–º–µ—Ä 2: ru, com, io')
    await MySceneStates.blocked_resources_add.set()

@dp.callback_query_handler(lambda call: call.data == 'remove_block_resources')
async def react_to_add_block_resources(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    group_id_url = call.message.entities[0].url
    group_id = int("-" + re.sub(r"\D", "", group_id_url))
    collection.find_one_and_update({"user_id": call.from_user.id}, {"$set": {"chat_editing": group_id}})
    await bot.send_message(call.message.chat.id, 'üìã –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä 1: ru\n–ü—Ä–∏–º–µ—Ä 2: ru, com, io')
    await MySceneStates.blocked_resources_remove.set()

@dp.callback_query_handler(lambda call: call.data == 'back_to_block_resources')
async def react_to_back_to_block_resources(call: CallbackQuery):
    try:
        group_id_url = call.message.entities[0].url
        group_id = "-" + re.sub(r"\D", "", group_id_url)
        db = collection.find_one({"chats": str(group_id)})

        index_of_chat = 0
        for index, item in enumerate(db['settings']):
            if item.get("chat_id") == group_id:
                index_of_chat = index
                break

        await call.answer()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{group_id}.id">{group_id}</a>)\n\n–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã:', reply_markup=generate_block_resources_show(call.from_user.id, index_of_chat))
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == 'my_profile')
async def show_profile(call: CallbackQuery):
    try:
        db = collection.find_one({"user_id": call.from_user.id})
        lic = '–õ–∏—Ü–µ–Ω–∑–∏–∏ –Ω–µ—Ç'
        if db['lic'] != 'None': lic = db['lic']
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> #{db["inlineid"]} - {db["register_data"]}\n<b>Username:</b> @{call.from_user.username}\n<b>–ò–º—è:</b> {call.from_user.first_name}\n<b>–ß–∞—Ç–æ–≤:</b> {len(db["chats"])}\n<b>–õ–∏—Ü–µ–Ω–∑–∏–π:</b> {db["lic"]}', reply_markup=generate_money_top_up())
        await call.answer()
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == 'back_to_main_page')
async def show_profile(call: CallbackQuery):
    try:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç-–∞–¥–º–∏–Ω –∏ –º–æ–≥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç.\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —Å–≤–æ–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç:', reply_markup=generate_add_button())
        await call.answer()
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'show_my_chats')
async def show_my_chats(call: CallbackQuery):
    try:
        db = collection.find_one_and_update({"user_id": call.from_user.id}, {'$set': {"current_pg": 0}})
        if len(db['chats']) == 0:
            await call.answer('–£ –≤–∞—Å –Ω–µ—Ç —á–∞—Ç–æ–≤ :(', show_alert=True)

        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üõ¢Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=await generate_my_chats(user_id=db["user_id"]))
        await call.answer()
    except Exception as e:
        print(e)

@dp.callback_query_handler(lambda call: call.data == 'next_page')
async def react_to_next_page(call: CallbackQuery):
    try:
        db = collection.find_one({"user_id": call.from_user.id})
        current_page = db['current_pg'] + 1
        collection.find_one_and_update({"user_id": call.from_user.id}, {'$set': {'current_pg': current_page}})

        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üõ¢Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=await generate_my_chats(current_page=current_page, user_id=db["user_id"]))
        await call.answer()
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == 'prev_page')
async def react_to_prev_page(call: CallbackQuery):
    try:
        db = collection.find_one({"user_id": call.from_user.id})
        current_page = db['current_pg'] - 1
        collection.find_one_and_update({"user_id": call.from_user.id}, {'$set': {'current_pg': current_page}})

        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üõ¢Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=await generate_my_chats(current_page=current_page, user_id=db["user_id"]))
        await call.answer()
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: 'schat' in call.data)
async def react_to_settings_chats(call: CallbackQuery):
    try:
        chat_id = call.data.split('_')[1]
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (<a href="https://{chat_id}.id">{chat_id}</a>):',
                         reply_markup=generate_settings())
        await call.answer()
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == 'money_top_up')
async def react_to_money_top_up(call: CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:\n30 –¥–Ω–µ–π - 30—Ä\n90 –¥–Ω–µ–π - 90—Ä\n180 –¥–Ω–µ–π - 180—Ä\n365 –¥–Ω–µ–π - 350—Ä')
